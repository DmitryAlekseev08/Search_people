from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler, \
    CallbackContext
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton, ParseMode
import logging.config

from telegram.utils.request import Request
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è html-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
from Request.request import vk_request
from Validate.validator import validator, replacing_sex, replacing_status

# Telegram
TB_TOKEN = '1111111111111111111111111111111111111111111111'
CHAT_ID = '111111111'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
Q, CITY, SEX, AGE_FROM, AGE_TO, STATUS, COUNT = range(7)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.fileConfig('logging.conf')
logger = logging.getLogger("Your_assistant")

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
button_help = "/help"
button_know = "I don't know"
BUTTON_SEX = ['man', 'woman', 'any']
BUTTON_STATUS = ['not married (not married)', 'meets', 'engaged ', 'married',
                 "it's complicated", 'in active search', 'lover', 'in civil marriage']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
def command_help(update: Update, context: CallbackContext):
    logger.info("Help")
    update.message.reply_text(
        'üîªThis program find people from social network, called VK.'
        '\nTo start print any text.'
        '\nTo get help print                       /help'
        '\nTo stop entering data print   /cancel',
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π /help
def reply_markup_help():
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=button_help),
            ],
        ],
        resize_keyboard=True
    )
    return reply_markup


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "I don't know"
def reply_markup_know():
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=button_know),
            ],
        ],
        resize_keyboard=True
    )
    return reply_markup


# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥–∞ /start —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç ConversationHandler
def echo_handler(update: Update, context: CallbackContext):
    logger.info("Introduction")
    update.message.reply_text(
        'Hello!üéâ\nThis bot will help you to find a particular person.',
        reply_markup=reply_markup_help(),
    )
    update.message.reply_text(
        'Enter /start to fill in form',
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ConversationHandler
def start_handler(update: Update, context: CallbackContext):
    logger.info('Start search')
    update.message.reply_text(
        'üë§Enter name for search. For example, John Smith',
        reply_markup=reply_markup_know(),
    )
    return Q


# –ò–º—è
def q_handler(update: Update, context: CallbackContext):
    context.user_data[Q] = update.message.text
    if context.user_data[Q] == "/cancel":
        return cancel_handler(update, context)
    logger.info(f'Name: {context.user_data[Q]}')
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=BUTTON_SEX[0]),
                KeyboardButton(text=BUTTON_SEX[1]),
                KeyboardButton(text=BUTTON_SEX[2]),
            ],
        ],
        resize_keyboard=True
    )
    update.message.reply_text(
        'üöπüö∫Enter sex of this person.',
        reply_markup=reply_markup,
    )
    return SEX


# –ü–æ–ª
def sex_handler(update: Update, context: CallbackContext):
    context.user_data[SEX] = update.message.text
    if context.user_data[SEX] == "/cancel":
        return cancel_handler(update, context)
    # –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ VK
    # –ù–∞–ø—Ä–∏–º–µ—Ä, man -> 2
    context.user_data[SEX] = replacing_sex(context.user_data[SEX])
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    context.user_data[SEX] = validator(context.user_data[SEX], 0, 2)
    if context.user_data[SEX] is None:
        update.message.reply_text(
            'You entered wrong value. PLease, repeat.',
        )
        return SEX
    logger.info(f'Sex: {context.user_data[SEX]}')
    update.message.reply_text(
        'üèôEnter city.',
        reply_markup=reply_markup_know()
    )
    return CITY


# –ì–æ—Ä–æ–¥
def city_handler(update: Update, context: CallbackContext):
    context.user_data[CITY] = update.message.text
    if context.user_data[CITY] == "/cancel":
        return cancel_handler(update, context)
    logger.info(f'City: {context.user_data[CITY]}')
    update.message.reply_text(
        '1Ô∏è‚É£Enter age from(> 0).',
        reply_markup=reply_markup_know()
    )
    return AGE_FROM


# –ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç
def age_from_handler(update: Update, context: CallbackContext):
    context.user_data[AGE_FROM] = update.message.text
    if context.user_data[AGE_FROM] == "/cancel":
        return cancel_handler(update, context)
    context.user_data[AGE_FROM] = validator(context.user_data[AGE_FROM], 1, 100)
    if not (context.user_data[AGE_FROM]):
        update.message.reply_text(
            'You entered wrong value. PLease, repeat.',
        )
        return AGE_FROM
    logger.info(f'Age from: {context.user_data[AGE_FROM]}')
    update.message.reply_text(
        '1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£Enter age to( <= 100).',
        reply_markup=reply_markup_know()
    )
    return AGE_TO


# –ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç
def age_to_handler(update: Update, context: CallbackContext):
    context.user_data[AGE_TO] = update.message.text
    if context.user_data[AGE_TO] == "/cancel":
        return cancel_handler(update, context)
    context.user_data[AGE_TO] = validator(context.user_data[AGE_TO], 1, 100)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –º–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –±—ã–ª –±–æ–ª—å—à–µ –º–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (not (context.user_data[AGE_TO])) or (context.user_data[AGE_FROM] > context.user_data[AGE_TO]):
        update.message.reply_text(
            'You entered wrong value. PLease, repeat.',
        )
        return AGE_TO
    logger.info(f'Age to: {context.user_data[AGE_TO]}')
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BUTTON_STATUS[0]),
             KeyboardButton(text=BUTTON_STATUS[1]),
             KeyboardButton(text=BUTTON_STATUS[2]),
             KeyboardButton(text=BUTTON_STATUS[3]),
             ],
            [KeyboardButton(text=BUTTON_STATUS[4]),
             KeyboardButton(text=BUTTON_STATUS[5]),
             KeyboardButton(text=BUTTON_STATUS[6]),
             KeyboardButton(text=BUTTON_STATUS[7]),
             ],
            [
                KeyboardButton(text=button_know),
            ]
        ],
        resize_keyboard=True
    )
    update.message.reply_text(
        'üíöEnter status.',
        reply_markup=reply_markup,
    )
    return STATUS


# –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
def status_handler(update: Update, context: CallbackContext):
    context.user_data[STATUS] = update.message.text
    if context.user_data[STATUS] == "/cancel":
        return cancel_handler(update, context)
    context.user_data[STATUS] = replacing_status(context.user_data[STATUS])
    context.user_data[STATUS] = validator(context.user_data[STATUS], 1, 8)
    if not (context.user_data[STATUS]):
        update.message.reply_text(
            'You entered wrong value. PLease, repeat.',
        )
        return STATUS
    logger.info(f'Status: {context.user_data[STATUS]}')
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=1),
             KeyboardButton(text=5),
             KeyboardButton(text=10),
             KeyboardButton(text=15),
             ],
            [
                KeyboardButton(text=button_know),
            ]
        ],
        resize_keyboard=True
    )
    update.message.reply_text(
        'üë®‚Äçüë©‚Äçüëß‚Äçüë¶Enter the number of users to return.',
        reply_markup=reply_markup,
    )
    return COUNT


def finish_handler(update: Update, context: CallbackContext):
    context.user_data[COUNT] = update.message.text
    if context.user_data[COUNT] == "/cancel":
        return cancel_handler(update, context)
    context.user_data[COUNT] = validator(context.user_data[COUNT], 1, 15)
    logger.info(f'Count: {context.user_data[COUNT]}')
    update.message.reply_text(
        'Result:',
        reply_markup=reply_markup_help(),
    )
    answer = 1
    # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    response = vk_request(context)
    logger.info(f'Status code:{response.status_code}')
    if response.json().get('response'):
        logger.info(response.json()['response']['items'])
        if not response.json()['response']['items']:
            answer = 0
    if response.json().get('error'):
        logger.info(response.json()['error'])
        answer = 0
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ Telegram
    if response.status_code == 200 and answer:
        for i in response.json()['response']['items']:
            if not (i.setdefault("city")):
                i["city"] = {}
                i["city"]["title"] = "unspecified"
            if not (i.setdefault("bdate")):
                i["bdate"] = "unspecified"
            update.message.reply_text(
                f'<a href="https://vk.com/id{i["id"]}">&#8205;</a>'
                f'id: {i["id"]}\nfirst name: {i["first_name"]}\nlast name: {i["last_name"]}\n'
                f'city: {i["city"]["title"]}\nbirthday date: {i["bdate"]}\n'
                f'is closed: {i["is_closed"]}\ncan '
                f'access closed: {i["can_access_closed"]}\n',
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False,
            )
    else:
        update.message.reply_text(
            "The request resulted in an error or nothing was found for your request",
        )
    logger.info('Finish search')
    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel - –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∏—Å–∫–∞(ConversationHandler)
def cancel_handler(update: Update, context: CallbackContext):
    logger.info('Cancel search')
    update.message.reply_text('Cancel. To start over, enter /start',
                              reply_markup=reply_markup_help(), )
    return ConversationHandler.END


def main():
    logger.info("Launch chat bot")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    req = Request(
        connect_timeout=0.5,
    )
    bot = Bot(
        token=TB_TOKEN,
        request=req,
        # –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º
        # base_url='https://telegg.ru/orig/bot',
    )
    updater = Updater(
        bot=bot,
        use_context=True
    )

    handler = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
        entry_points=[
            CommandHandler('start', start_handler),
        ],
        # –°–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        states={
            Q: [
                MessageHandler(Filters.all, q_handler, pass_user_data=True),
            ],
            SEX: [
                MessageHandler(Filters.all, sex_handler, pass_user_data=True),
            ],
            CITY: [
                MessageHandler(Filters.all, city_handler, pass_user_data=True),
            ],
            AGE_FROM: [
                MessageHandler(Filters.all, age_from_handler, pass_user_data=True),
            ],
            AGE_TO: [
                MessageHandler(Filters.all, age_to_handler, pass_user_data=True),
            ],
            STATUS: [
                MessageHandler(Filters.all, status_handler, pass_user_data=True),
            ],
            COUNT: [
                MessageHandler(Filters.all, finish_handler, pass_user_data=True),
            ],
        },
        fallbacks=[],
    )
    updater.dispatcher.add_handler(handler)
    updater.dispatcher.add_handler(CommandHandler('help', command_help))
    updater.dispatcher.add_handler(MessageHandler(Filters.all, echo_handler))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telegram API
    info = bot.get_me()
    logger.info(f'Bot info: {info}')
    updater.start_polling()
    updater.idle()
    logger.info("Shutting down the chatbot")


if __name__ == '__main__':
    main()
